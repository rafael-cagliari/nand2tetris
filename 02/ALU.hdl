// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a = x, b = false, sel = zx, out = outZx);
    Not16(in = outZx, out = outNotZx);
    Mux16(a = outZx, b = outNotZx, sel = nx, out = outNx);

    Mux16(a = y, b = false, sel = zy, out = outZy);
    Not16(in = outZy, out = outNotZy);
    Mux16(a = outZy, b = outNotZy, sel = ny, out = outNy);

    And16(a = outNx, b = outNy, out = outAndNxNy);
    Add16(a = outNx, b = outNy, out = outNxPlusNy);
    Mux16(a = outAndNxNy, b = outNxPlusNy, sel = f, out = outF);

    Not16(in = outF, out = notOutF);
    Mux16(a = outF, b = notOutF, sel = no, out = out, out[15] = lastOut, out[0..7] = finalLeft, out[8..15] = finalRight);
    
    Or8Way(in = finalLeft, out = final8WayLeft);
    Or8Way(in = finalRight, out = final8WayRight);
    Or(a = final8WayLeft, b = final8WayRight, out = andFinal8Way);
    Not(in = andFinal8Way, out = zr);

    And(a = lastOut, b = true, out = ng);
}